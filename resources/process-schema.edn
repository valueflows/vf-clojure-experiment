{:input-objects {:EconomicEventCreateParams
                 {:fields
                  {:note {:type String}
                   :hasPointInTime {:type String}
                   :provider {:type Int}
                   :receiver {:type Int}
                   :action {:type Int}
                   :inputOf {:type Int}
                   :outputOf {:type Int}
                   :resourceQuantityNumericValue {:type Float}
                   :resourceQuantityUnit {:type Int}
                   :effortQuantityNumericValue {:type Float}
                   :effortQuantityUnit {:type Int}
                   :resourceInventoriedAs {:type Int}
                   :resourceConformsTo {:type Int}}}}


 :unions {:trackResult
          {:members [:Process :EconomicEvent :EconomicResource]}}

 :objects {:Process {:description "An activity that changes inputs into outputs. It could transform or transport economic resource(s)."
                     :fields
                     {:id {:type Int}
                      :name {:description "An informal or formal textual identifier for an item. Does not imply uniqueness."
                             :type (non-null String)}
                      :note {:type String
                             :description "A textual description or comment."}
                      :before {:type String
                               :description "The economic event occurred prior to this date/time."}
                      :finished {:type Boolean
                                 :description "The process is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."}
                      ; Inverse relationships and queries
                      :inputs {:type (list :EconomicEvent)}
                      :outputs {:type (list :EconomicEvent)}
                      :unplannedEconomicEvents {:type (list :EconomicEvent)}
                      :committedInputs {:type (list :EconomicEvent)}
                      :committedOutputs {:type (list :EconomicEvent)}
                      }}

           :Action {:description "An informal or formal textual identifier for an object. Does not imply uniqueness."
                    :fields {:id {:type (non-null Int)}
                             :name {:type (non-null String)}}}

           :Unit {:description "Defines a unit of measurement, along with its display symbol."
                  :fields {:id {:type (non-null Int)}
                           :name {:type String}}}

           :Agent {:description "A person or a group"
                   :fields {:id {:type (non-null Int)}
                            :name {:type String}
                            :note {:type String}
                            :type {:type String}}}

           :ResourceSpecification {:description "An informal or formal textual identifier for an object. Does not imply uniqueness."
                                   :fields {:id {:type (non-null Int)}
                                            :name {:type String}
                                            :note {:type String}}}

           :EconomicResource {:description "References one or more concepts in a common taxonomy or other classification scheme for purposes of categorization or grouping."
                              :fields {:id {:type (non-null Int)}
                                       :name {:type String}
                                       :track {:type (list :trackResult)}
                                       :accountingQuantityNumericValue {:type Float}
                                       :accountingQuantityUnit {:type Unit}
                                       :onhandQuantityUnit {:type Unit}
                                       :onhandQuantityNumericValue {:type Float}
                                       :unitOfEffort {:type Unit}
                                       :note {:type String}
                                       :conformsTo {:type ResourceSpecification}}}

           :EconomicEvent {:description "Relates an economic event to a verb, such as consume, produce, work, improve, etc."
                           :fields {:id {:type (non-null Int)}
                                    :note {:type String}
                                    :hasPointInTime {:type String}
                                    :provider {:type Agent}
                                    :receiver {:type Agent}
                                    :action {:type Action}
                                    :inputOf {:type Process}
                                    :outputOf {:type Process}
                                    :resourceQuantityNumericValue {:type Float}
                                    :resourcequantityunit {:type Unit}
                                    :effortQuantityNumericValue {:type Float}
                                    :effortQuantityUnit {:type Unit}
                                    :resourceInventoriedAs {:type EconomicResource}
                                    :resourceConformsTo {:type ResourceSpecification}}}

           :IncomingValueflows {:description "Relates the whole valueflows starting from a resource"
                                :fields {:text {:type String}
                                         :type {:type String}}}}

 :queries {; Agent module
           :agent {:type :Agent
                   :description "Retrieve the agent by its ID, if it exists"
                   :args {:id {:type ID}}
                   :resolve :query/agent}
           :allAgents {:type (list :Agent)
                       :description "Retrieve all agents"
                       :args {}
                       :resolve :query/allAgents}

           ; Observation layer
           :economicEvent {:type :EconomicEvent
                           :description "Retrieve the economic event by its ID, if it exists."
                           :args {:id {:type ID}}
                           :resolve :query/economicEvent}

           :allEconomicEvents {:type (list :EconomicEvent)
                               :description "Retrieve all economic events"
                               :args {}
                               :resolve :query/allEconomicEvents}

           :economicResource {:type :EconomicResource
                              :description "Retrieve the economic resource by its ID, if it exists."
                              :args {:id {:type ID}}
                              :resolve :query/economicResource}

           :allEconomicResource {:type (list :EconomicResource)
                                 :description "Retrieve all economic resources"
                                 :args {}
                                 :resolve :query/allEconomicResources}

           :process {:type :Process
                     :description "Retrieve the process by its ID, if it exists."
                     :args {:id {:type ID}}
                     :resolve :query/process}

           :allProcesses {:type (list :Process)
                          :description "Retrieve all processes"
                          :args {}
                          :resolve :query/allProcesses}

           :resourceSpecification {:type :ResourceSpecification
                                   :description "Retrieve the resource specification by its ID, if it exists."
                                   :args {:id {:type ID}}
                                   :resolve :query/resourceSpecification}

           :allResourceSpecification {:type (list :ResourceSpecification)
                                      :description "Retrieve all resource specification"
                                      :args {}
                                      :resolve :query/allResourceSpecification}

           :action {:type :Action
                    :description "Retrieve the action by its ID, if it exists."
                    :args {:id {:type ID}}
                    :resolve :query/action}

           :allActions {:type (list :Action)
                        :description "Retrieve all actions"
                        :args {}
                        :resolve :query/allActions}

           :unit {:type :Unit
                  :description "Retrieve the unit by its ID, if it exists."
                  :args {:id {:type ID}}
                  :resolve :query/unit}

           :allUnits {:type (list :Unit)
                      :description "Retrieve all units"
                      :args {}
                      :resolve :query/allUnits}}




 :mutations
 {:createEconomicEvent
  {:type :EconomicEvent
   :description "Add a new event with the possibility to create or not a new resource"
   :args {:event {:type :EconomicEventCreateParams}}
   :resolve :mutation/createEconomicEvent}}}
